{
	"label": "Full-Stack Development",
	"profile": ["full-stack-development"],
	"weeks": [
		{
			"label": "Week 1: How web works?",
			"topic": "HTML, CSS & Bootstrap",
			"summary": "Understand HTTP, the browser, the Client-Server model, create your first HTML, The head & body HTML, tables.",
			"days": [
				{
					"label": "Day 1",
					"description": "Welcome to web development: At the beginning there was only HTML, years later CSS appeared, and that's how the web 1.0 came to life",
					"instructions": "Start Coding right away! Explain the internet architecture in 5 minutes, then explain how the browser works and how HTTP works with one example. Then start coding right away, do the postcard and explain the tags as you use then in the project. Students should code the project with your lead.",
					"project": {
						"title": "Digital Postcard",
						"solution": "https://bitbucket.org/codingacademy/postcard"
					},
					"homework": "The students must finish the Postcard on their own (there is a video-tutorial)",
					"key-concepts": ["Everything is text!", "Always Be Closing", "Client vs Server", "HTTP Request vs Response", "Browser Interpretation", "HTML vs CSS", "CSS Selectors (basic ones)"],
					"lessons": [{
							"title": "Introduccion to the pre-work",
							"slug": "introduction-to-the-prework"
						},
						{
							"title": "Internet Architecture",
							"slug": "internet-architecture"
						},
						{
							"title": "Learn HTML",
							"slug": "learn-html"
						},
						{
							"title": "Learn CSS",
							"slug": "learn-css"
						}
					],
					"quizzes": [
						{
							"title": "About the Prework",
							"slug": "intro-to-prework"
						},
						{
							"title": "Basics of HTML",
							"slug": "html"
						}
					],
					"replits": [{
							"title": "Learn HTML",
							"slug": "html"
						},
						{
							"title": "Learn CSS",
							"slug": "css"
						}
					],
					"assignments": ["postcard"],
					"technologies": ["HTML5", "CSS"]
				},
				{
					"label": "Day 2",
					"description": "Websites got popular and CSS evolved to enable very ritch and elaborated layouts.",
					"instructions": "Connecting CSS & HTML: Finish the postcard and start the Instagram Feed. Review all the key concepts with your students.",
					"project": {
						"title": "Simple Instagram",
						"url": "https://bitbucket.org/codingacademy/instagram-without-bootstrap"
					},
					"homework": "Students must finish the Instagram & the Postcard.",
					"key-concepts": ["Do not use ID as CSS selectors (use specificity)", "::Before & ::After Selectors", "DRY Technique", "Box Model"],
					"lessons": [{
							"title": "Doing Layouts",
							"slug": "build-layouts"
						},
						{
							"title": "Advanced CSS Selectors",
							"slug": "mastering-css-selectors"
						}
					],
					"replits": [{
						"title": "Introduccion to the prework",
						"slug": "layouts"
					}],
					"quizzes": [
						{
							"title": "Internet Architecture",
							"slug": "internet-architecture"
						},
						{
							"title": "Basics of CSS",
							"slug": "css"
						}
					],
					"assignments": ["instagram-feed"],
					"technologies": ["CSS3", "HTML5"]
				},
				{
					"label": "Day 3",
					"description": "Then, Bootstrap came to profesionalize websites, removing 99% of the pain. Everything is a component from now own.",
					"instructions": "Explain bootstrap and how it solves 99% of the pain. Everything is a component from now own.",
					"project": {
						"title": "Bootstrap Instagram",
						"url": "https://bitbucket.org/codingacademy/instagram-with-bootstrap"
					},
					"lessons": [{
						"title": "Working with Bootstrap",
						"slug": "learn-bootstrap-4"
					}],
					"replits": [{
						"title": "Working with Bootstrap",
						"slug": "bootstrap"
					}],
					"assignments": ["instagram-feed-bootstrap"],
					"key-concepts": ["Bootstrap", "Components", "Workflow: Identify the components, Copy&Paste them and finally customize them", "Helper Classes"],
					"technologies": ["Bootstrap"]
				},
				{
					"label": "Weekend",
					"description": "And God created the coding weekends, the perfect place to partice, share and collaborate with your classmates.",
					"instructions": "Students must finish all pending proyects!"
				}
			]
		},
		{
			"label": "Week 2: Wireframes, CMD & GIT",
			"topic": "Prework done!",
			"summary": "Time to start having a professional workflow",
			"days": [{
					"label": "Day 4",
					"description": "A text editor and the console, that's all you need to be a great coder. Time to master the second one.",
					"instructions": "Teach the command line to your students, use the CMD challenge to make it very fun! Start with a small explanation about the importance of the CMD and then explain each command after its respective challenge is completed.",
					"project": {
						"title": "The CMD Challenge",
						"url": "https://bitbucket.org/codingacademy/terminal-challenge"
					},
					"replits": [{
						"title": "Command Line Interactive Challenge",
						"slug": "the-command-line"
					}],
					"homework": "At the end of the class, present the students with the GIT project & please ask each student to start coding its corresponding part of the website.",
					"key-concepts": ["Most used CMD commands", "File Directory Hierarchy", "Relative ./ vs Absolute Paths ", "Moving Up ..", "Autocomplete with TAB", "GIT in a general way"],
					"technologies": ["Command Line", "Bash Scripts"]
				},
				{
					"label": "Day 5",
					"description": "The CMD Line has millions of tools, it's time to learn the first ones: GIT & Github, together they make collaboration amazing!",
					"instructions": "Time to explain and practice with GIT in detail, create a repository for your Landing Page GIT proyect and make them clone it and upload their piece of the proyect. Review the key concepts.",
					"project": {
						"title": "GIT Colaborative Landing Page",
						"url": "https://bitbucket.org/codingacademy/git-collaboration"
					},
					"homework": "At the end of the class, present the students with the GIT project & please ask each student to start coding its corresponding part of the Landing Page. Suggested parts: navbar, jumbotron, 2 parts description, product showcase, marketing banner, contact us, footer",
					"key-concepts": ["Creating SSH Keys", "Using Github", "The Commit Object", "The HEAD", "The Stage", "Branch", "Git FLOW (profesional branching)", "Commit vs PUSH", "Resolving Conflicts"],
					"replits": [{
						"title": "Git interactive tutorial",
						"slug": "git"
					}],
					"technologies": ["Git", "Github","Markdown"]
				},
				{
					"label": "Day 6",
					"description": "Coding is one of the most creative activities in the world, we need a process to make sense out of our messy brains: Wireframes are the ideal starting point!",
					"instructions": "Make the students design a wireframe starting from the typical client requierment specs, teach them the importance of using components and how to pick them and draw a wireframe before jumping into coding.",
					"project": {
						"title": "ABC Chocolate (Wire-framing)",
						"url": "https://bitbucket.org/codingacademy/abc-chocolate-wire-framing"
					},
					"homework": "Finished Replits and Projects",
					"key-concepts": ["Wireframes", "Bootstrap Components", "Website Sitemap & Sections"],
					"technologies": ["Wireframing"]
				},
				{
					"label": "Weekend",
					"description": "It has been two crazy weeks, thank God we have another coding weekend to keep up and practice.",
					"instructions": "Students must finish HTML, CSS3, Layout, Bootstrap, GIT and deliver all the projects througouht the online platform"
				}
			]
		},
		{
			"label": "Week 3: First coding skills",
			"topic": "Create algorithms",
			"summary": "Learn to loop, work with arrays, if..else and functions. Create algorithms.",
			"days": [{
					"label": "Day 7",
					"description": "HTML & CSS are great, but the world needed interactive pages. Javascript comes to help us generate HTML & CSS based on the users activity.",
					"instructions": "The excuse generator is a great way to explain how Javascript and HTML/CSS can play together. Do it with the students as you explain all the programing Key Concepts",
					"project": {
						"title": "The Excuse Generator",
						"url": "https://bitbucket.org/codingacademy/excuse-generator"
					},
					"homework": "Students need to make the replits about javascript and the layout for the Random Card Generator",
					"key-concepts": ["Variables", "DataTypes", "Arrays", "Functions (anonymus vs normal)", "The forEach", "Every javascript code starts OnLoad", "String Concatenation"],
					"lessons": [{
							"title": "Learning to code with JS",
							"slug": "learn-to-code-js"
						},
						{
							"title": "Looping and Arrays",
							"slug": "working-with-arrays"
						}
					],
					"replits": [{
							"title": "Introduction to JS",
							"slug": "js-beginner"
						},
						{
							"title": "Arrays and Loops",
							"slug": "arrays"
						}
					],
					"assignments": ["excuse-generator"],
					"technologies": ["Javascript", "HTML5", "CSS3", "Bootstrap", "Transitions"]
				},
				{
					"label": "Day 8",
					"instructions": "Finish the excuse generator and help the students do as many replits as they can during class, make sure to help them progress as much as you want in the arrays, loops, conditionals, functions, etc.",
					"project": {
						"title": "Replit session: Do the replits with the students"
					},
					"key-concepts": ["Variables", "DataTypes", "Arrays", "Functions (anonymus vs normal)", "The forEach", "Every javascript code starts OnLoad", "String Concatenation"],
					"lessons": [],
					"replits": [{
						"title": "Working with functions",
						"slug": "functions"
					}],
					"technologies": ["JS Emac2018", "JS Terminal"]
				},
				{
					"label": "Day 9",
					"instructions": "Let's do the Random Card but focusing a lot on the workflow (how to plan and begin coding), re-inforce the ONLOAD and PRE-LOAD main events and how to change CSS with JS",
					"project": {
						"title": "Random Card Generator",
						"url": "https://bitbucket.org/codingacademy/random-card"
					},
					"homework": "Finish the Random Card and pending replits, start DOM & EVENTS replits",
					"replits": [{
							"title": "The DOM",
							"slug": "the-dom"
						},
						{
							"title": "Events",
							"slug": "events"
						}
					],
					"assignments":["random-card"],
					"key-concepts": ["Main website events: PreLoad & OnLoad", "The-Runtime (after onload)", "Using Math.random() GLOBAL Function to pick the cards and suites", "Introduce the DOM", "Use querySelector() to select DOM Elements just like you do with CSS", "Add/Remove CSS Classes to DOM elements"],
					"technologies": ["The DOM", "Events", "CSS", "CSS Transitions"]
				},
				{
					"label": "Weekend",
					"instructions": "During the weekend, students must finish all the replits"
				}
			]
		},
		{
			"label": "Week 4: React.js introduction",
			"warning": "Students need to be confortable looping already",
			"topic": "React, Components & Web Apps",
			"summary": "Create your first react application",
			"days": [{
					"label": "Day 10",
					"instructions": "Explain the professional workflow in JS: Why Webpack created bundles? Whay use JS Modules? How organize your code, transpile with babel for cros-browser support, Javascript Emac2018. Please do not attempt to explain the Webpack Config.",
					"project": {
						"title": "Todo list with React",
						"url": "https://bitbucket.org/codingacademy/todo-list"
					},
					"homework": "Students must have the CSS and HTML for the TodoList already finished and separated in two components: The whole list and each task on the list.",
					"lessons": [{
						"title": "Bundeling with Webpack",
						"slug": "webpack"
					}, {
						"title": "Building interfaces with React",
						"slug": "react-js"
					}],
					"assignments":["todo-list"],
					"key-concepts": ["Please do not attempt to explain the Webpack Config.", "Bundling JS, CSS & Images.", "Export -> Import modules", "Include your bundle on index.html", "Create your React.js Component View"],
					"technologies": ["React", "Webpack", "Babel.js", "JS Modules"]
				},
				{
					"label": "Day 11",
					"instructions": "React as rendering engine: Students need to understand that now they can finally create their own HTML tags (React Components) and how to use the State and the Props",
					"project": {
						"title": "Continue with: Todo list with React",
						"url": "https://bitbucket.org/codingacademy/todo-list"
					},
					"key-concepts": ["Condigional Rendering", "Using props to pass information to the parent component"],
					"homework": "Students must finish the TodoList being able to add & delete tasks.",
					"lessons": [{
						"title": "Building interfaces with React",
						"slug": "react-js"
					}],
					"technologies": ["React", "Javascript", "Events"]
				},
				{
					"label": "Day 12",
					"instructions": "React Router + Flux: How to create components that behave like Flux.Views (layouts) and math them with URL Routers. Demonstrate component lifecycle methods: WillMount, DidMount and willUnmount. Finally demonstrate the flux Action-Model-View workflow",
					"project": {
						"title": "The Contact List",
						"url": "https://bitbucket.org/codingacademy/contact-list"
					},
					"assignments": ["contact-list"],
					"homework": "Students must create a contact managment app using React Router, Flux & Component lifecycle methods",
					"key-concepts": ["Router: Matching URLs Flux.Views", "Mapping user actions in Flux.Actions", "Dispatching actions to Flux.Store setters", "Handling Flux.Store changes", "Redirect with history.push()"],
					"technologies": ["Flux", "NPM", "React Router", "React", "MVC"]
				},
				{
					"label": "Weekend",
					"instructions": "Finish the TodoList with React Router + Flux",
					"homework": "Finish the TodoList with React Router + Flux"
				}
			]
		},
		{
			"label": "Week 5: The Project!",
			"topic": "SCRUM, Kanban, Agile",
			"summary": "Time to start working on the project using Agile Methodologies",
			"days": [{
					"label": "Day 13",
					"instructions": "Explain User Stories and the SCRUM methodology. Students must pick their projects & partner, and start building the user stories on Trello.com, create the board with them.",
					"project": {
						"title": "Project Kanban Board",
						"url": "#TODO"
					},
					"key-concepts": ["Building a Trello board", "Building a Kanban Board", "Creating the project Backlog", "Who to write the story", "Acceptance Criteria", "You application roles & capabilities", "Standup Meeting"],
					"homework": "Students must finish the user stories by next class, remember that the student projects must meet certain conditions to be accepted.",
					"technologies": ["SCRUM", "User Stories", "Kanban", "Agile Methodologies"]
				},
				{
					"label": "Day 14",
					"instructions": "Review student project Boards and User Stories, fix their errors and make them wireframe their entire project",
					"project": {
						"title": "Wireframe your project Flux.Views",
						"url": "#"
					},
					"key-concepts": ["Students will deliver bad written stories, sit with them and re-explain the best practices"],
					"homework": "Finish Wireframes and code the HTML/CSS for your first home Flux.View",
					"technologies": ["Javascript", "React", "Flux", "React Router"]
				},
				{
					"label": "Day 15",
					"instructions": "Students must have all the MVP stories and wireframes finished, now it's time to start coding them, thei should turn their HTML/CSS into a Flux.View and separate everything into components",
					"project": {
						"title": "Build your project Flux.Views",
						"url": "#"
					},
					"key-concepts": ["Using the React Debugging Chrome Plugin", "Debugging code with the Chrome Source Tab"],
					"homework": "Sit with every project team and discuss how to split the code into Flux.Views and React.Components, students must finish the home layout by next class",
					"technologies": ["Minimum Viable Product", "Flux", "The Chrome Inspector"]
				},
				{
					"label": "Weekend",
					"instructions": "Student Projects Flux.Views must be finished by next class"
				}
			]
		},
		{
			"label": "Week 6: Flux.Model to Flux.View",
			"topic": "MVC and Flux Framwrok",
			"summary": "No more hard-coding, make your Flux.Views and Components render from the Flux.Model",
			"days": [{
					"label": "Day 16",
					"instructions": "Now with map the Flux.Views user actions into Flux.Actions and greate the Flux.Model setters for them. The Flux.Views are able to get the Flux.Store data through the public getters.",
					"project": {
						"title": "Soft-code your project views",
						"url": "#todo"
					},
					"homework": "Students must add all the application actions into Flux.Actions and start linking them to the Flux.Views, also start dispatching the actions to the Stores if possible",
					"key-concepts": ["How to map map user actions to Flux.Actions", "Dispatching into the Flux.Store setters", "What to save on the store and what to save locally on the Views/Comopnents States", "Why are the model setters private?", "Why emitting?", "How to listen to the emit?"],
					"technologies": ["React", "Webpack", "NPM", "Babel.js", "Flux", "HTML Forms", "MVC"]
				}, {
					"label": "Day 17",
					"instructions": "Finally students must use the Flux.Store getters to retreive the data into the views, they should understand the flow: store changes > views listen > views get the new info and set into the local state > views re-render",
					"project": {
						"title": "Work on the student project",
						"url": "#"
					},
					"key-concepts": ["Create some sample data on your Flux.Model", "Create the getters to get that data from the views", "Create the listeners to handle store changes", "Re-set the views model on store changes", "Re-render and conditionally display whatever is needed", "Create any actions to change the models", "Dispatch from the actions", "Create the setters and update the store state"],
					"homework": "Students must work on all their Flux.Views to make them work with store data, students must also work on polishing the CSS/HTML based on that",
					"technologies": ["Flux Workflow", "Data-Modeling", "Object Oriented Programming"]
				},
				{
					"label": "Day 18",
					"instructions": "Last day to complete your Flux.Views, Flux.Actions and Flux.Model",
					"project": {
						"title": "Finish project Views/Actions/Models",
						"url": "#"
					},
					"homework": "Finish the project Views/Actions/Models"
				},
				{
					"label": "Weekend",
					"instructions": "Students must finish the AJAX Replits",
					"replits": [{
						"title": "Learn AJAX",
						"slug": "ajax"
					}]
				}
			]
		},
		{
			"label": "Week 7: Ajax(HTTP-JSON)",
			"topic": "AJAX & 3rd Party API's",
			"summary": "Use the Javascript Fetch native object to do API Requests and Receive the JSON Responses",
			"days": [{
					"label": "Day 19",
					"instructions": "Intro to AJAX: Re-Explain HTTP Requests but now using GET, POST, PUT & DELETE. Introduce JSON instead of HTML as the main communication format. Serialize and Unserialize.",
					"project": {
						"title": "Use the Contact Manage API to save, delete and update the contacts",
						"url": "#"
					},
					"replits": [{
						"title": "Learn AJAX",
						"slug": "ajax"
					}],
					"key-concepts": ["How to use POSTMan, set environment variables and use collections", "JSON is a Javascript object but as TEXT", "The goal is to send/receive everything as JSON Serialize>Send>Unserialize", "What is serialization and how to do it (Parsing)", "Why using several request types (GET, POST, PUT, DELETE)?", "Explan the 3 mains types content-types: Form, URL-Encoded, Raw (With JSON)"],
					"homework": "Using postman, and then using Flux/React, students must consume the API to Save, Delete and Update Contacts.",
					"technologies": ["HTTP", "AJAX", "JSON", "API", "Serialization"]
				},
				{
					"label": "Day 20",
					"instructions": "Finish the Contact Managment API integration, focus on Debugging procedures and start the introduction to Python",
					"project": {
						"title": "Contact Managment API Integration",
						"url": "#"
					},
					"homework": "Students must finish the Contact Managment API integration and advance a lot on the Python replits",
					"technologies": ["Python", "Back-end", "API"]
				},
				{
					"label": "Day 21",
					"instructions": "One last day to finish the Contact Managment Application with your students, review all the Flux, React, Components and HTTP Ajax concepts and best practices",
					"project": {
						"title": "Contact Managment API Integration",
						"url": "#"
					},
					"homework": "Students must finish the Contact Managment Application and complete all the Python Replits"
				},
				{
					"label": "Weekend",
					"instructions": "As homework students must react and review the Lessons and Videos about Python, Django-Rest"
				}
			]
		},
		{
			"label": "Week 8: Create your own API",
			"topic": "Python, Django, ORM",
			"summary": "Creating an API use Python, Django & Rest",
			"days": [{
					"label": "Day 22",
					"instructions": "First, run a simple python script in the shell, explain the benefits and capabilities that brings being in the backend. Then, install django using the boilerplate and create one simple endpoint with a very simple model (no relations)",
					"project": {
						"title": "Build a Contact Managment API",
						"url": "#"
					},
					"replits": [{
						"title": "Learn Python",
						"slug": "python"
					}],
					"key-concepts": ["Python has access to the Entire Machine", "Django has packages too (PIP)", "Requirements.txt", "Django Framework", "Workflow for Creating an endpoint"],
					"homework": "Students must create the required models for the Contact Managment Application",
					"technologies": ["Django", "API's", "Serialization", "PIP Package Manager"]
				},
				{
					"label": "Day 23",
					"instructions": "Practice the Django-Rest MVC Workflow to create new endpoints, focus on how the django ORM works and how to create relationships",
					"project": {
						"title": "Continue: Contact Managment API",
						"url": "#"
					},
					"replits": [{
						"title": "Learn SQL",
						"slug": "sql"
					}],
					"key-concepts": ["Create new endpoints", "Configuring MySQL", "Creating Models", "Creating Migrations", "Running Migrations","Using PHPMyAdmin", "OneToMany Relationships (models.py)", "ManyToMany Relationships (models.py)"],
					"homework": "Stutents create all the models of the contact managment API and continue building the enpoints",
					"technologies": ["Data Modeling", "Migrations", "ORM", "Django"]
				},
				{
					"label": "Day 24",
					"instructions": "Continue doing the endpoints with your students",
					"project": {
						"title": "Continue: Contact Managment API",
						"url": "#"
					},
					"replits": [],
					"key-concepts": [""],
					"homework": "",
					"technologies": ["ORM", "Django", "MySQL", "PHPMyAdmin"]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 9: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 25",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 26",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 27",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 10: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 28",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 29",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 30",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 11: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 31",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 32",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 33",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 12: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 34",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 35",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 36",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 13: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 37",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 38",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 39",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 14: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 40",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 41",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 42",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 15: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 43",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 44",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 45",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Weekend",
					"instructions": ""
				}
			]
		},
		{
			"label": "Week 16: ",
			"topic": "",
			"summary": "",
			"days": [{
					"label": "Day 46",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Day 47",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "Pitch Day",
					"instructions": "",
					"project": {
						"title": "",
						"url": "#"
					},
					"replits": [{
						"title": "",
						"url": ""
					}],
					"key-concepts": [""],
					"homework": "",
					"technologies": [""]
				},
				{
					"label": "The End",
					"instructions": ""
				}
			]
		}
	]
}